using System;
using System.Drawing;
using System.Windows.Forms;

namespace Snake
{
    class Engine
    {
        Timer timer = new Timer();
        Form1 form = new Form1();
        CollisionTracker col = new CollisionTracker();
        
        readonly Player[] _players =
        {
            new Player(1, 100, 100, Color.Green,
                Keys.W, Keys.S, Keys.A, Keys.D),

            new Player(2, 100, 150, Color.Magenta,
                Keys.I, Keys.K, Keys.J, Keys.L),
        };

        readonly FoodAbstract[] _foods =
        {
            new NormalFood(),
            new ValuableFood(),
            new DietFood(),
            new SpeedUpFood()
        };
        public void InitializeComponents()
        {
            foreach (var food in _foods)
            {
                food.GenerateFood();
            }
            
            foreach (var player in _players)
            {
                form.Controls.Add(player.label);
                form.KeyDown += player.Movement;
                
                player.label.AutoSize = true;
                player.label.ForeColor = Color.White;
                player.label.BackColor = Color.Transparent;
                player.label.Font = new Font("TimesNewRoman", 20);
                player.label.Text = player.Score.ToString();
                
            }
            //Rename to victory Label
            form.label1.Visible = false;
            
            //Remove Autogenerated Labels in VS
            form.label2.Visible = false;
            
            form.BackColor = Color.FromArgb(45, 45, 45);
            timer.Interval = 1000 / 30;
            form.Paint += DrawField;
            timer.Tick += TickTock;
            timer.Start();
            Application.Run(form);
        }

        /// <summary>
        /// Checks if the game is over and displays winner.
        /// </summary>
        void IsGameOver()
        {
            foreach (var player in _players) //Checks if game is actually over
            {
                if (player.Alive)
                    return;
            }
            
            timer.Stop();
            var victoriousPlayer = 0;
            var victoryScore = 0;
            var tie = false;
            
            form.label1.Visible = true;
            foreach (var player in _players)
                player.label.Visible = false;

            foreach (var player in _players)
            {
                if (player.Score > victoryScore)
                {
                    victoryScore = player.Score;
                    victoriousPlayer = player.Num;
                }
            }
            
            //Om båda spelarna har samma poäng, så är det oavgjort
            if (_players[0].Score == _players[1].Score)
            {
                tie = true;
            }

            if (tie)
            {
                form.label1.Text = "Tie!";
                return;
            }
            //Om det inte är oavgjort så har någon vunnit
            form.label1.Text =
                $"Player {victoriousPlayer} Has won";
        }

        private void DrawField(object sender, PaintEventArgs e)
        {
            foreach (var player in _players)
            {
                player.DrawSnake(e);
            }
            foreach (var food in _foods)
            {
                food.DrawFood(e);
            }
        }


        void TickTock(Object objects, EventArgs e)
        {
            foreach (var player in _players)
            {
                
                player.Move();
                foreach (var food in _foods)
                {
                    if (col.playerRecCollision(player, 
                                    food.ColParams, form ) == 1)
                    {
                        //Om snake konsumerar diet-food krymper den
                        if (food.FoodType == "Diet")
                        {
                            player.Shrink();
                        }
                        //Annars växer den
                        else
                        {
                            //Ändrar playerstate justAte till true för att hjälpa med self-collision
                            player.justAte = true;
                            //Om spelaren äter en valuable type food ska den växa två gånger (en gång i if, en gång utanför if)
                            //player.move flyttar spelaren ett tick. Anledningen till detta är att när en ny bit av kroppen läggs till,
                            //måste spelaren ha hunnit flytta på sig, annars spawnar body på sig själv
                            //detta kommer då att trigga kollisionsfunktionen och spelaren dör.
                            //för att kontra detta kör vi move() en gång till. 
                            if (food.FoodType == "Valuable")
                            {
                                player.Grow();
                                player.Move();
                            }
                            /*                              INDIVIDUELL UTÖKNING RASMUS NILSSON
                             * Denna mattyp ger spelaren en taktisk speedupboost tills dess att spelaren manipulerar sina vektorer igen
                             * dvs genom att röra på sig i ett annat håll. Detta gör att man måste planera från vilken vinkel man vill 
                             * äta maten för att kunna röra sig mer offensivt. 
                             */
                            if (food.FoodType == "SpeedUp")
                            {
                                player.vector.X *= 2;
                                player.vector.Y *= 2;
                            }
                            player.Grow();
                        }
                        player.Score += food.Value;
                        player.label.Text = player.Score.ToString();
                        food.GenerateFood();
                    }
                    
                }
                //Kollar self-collision
                if (col.playerSelfCollision(player) == 1)
                {
                    player.Alive = false;
                }
                //Sätter tillbaka justAte till false så att snake återigen kan kollidera med sin svans
                player.justAte = false;
            }
            switch (col.playerCollision(_players[0], _players[1]))
            {
                case 1:
                    _players[0].Alive = false;
                    break;
                case 2:
                    _players[1].Alive = false;
                    break;
                case 3:
                    _players[0].Alive = false;
                    _players[1].Alive = false;
                    break;
                case 0:
                    break;
                default:
                    break;
                
            }
              
            IsGameOver();
            form.Refresh();
        }
    }
}
